---
- module_defaults:
    group/infoblox.bloxone.all:
      csp_url: "{{ csp_url }}"
      api_key: "{{ api_key }}"
  block:
    # Create a random Auth Zone name to avoid conflicts
    - ansible.builtin.set_fact:
        fqdn: "test-auth_zone-{{ 999999 | random | string }}.com."
        tag_value: "site-{{ 999999 | random | string }}"

    # Basic Test for Auth Zone
    - name: Create an Auth Zone
      infoblox.bloxone.dns_auth_zone:
        fqdn: "{{ fqdn }}"
        primary_type: cloud
        view: "{{ _view.id }}"
        tags:
          location: "{{ tag_value }}"
        state: present
      register: auth_zone

    - name: Get Information about the Auth Zone
      infoblox.bloxone.dns_auth_zone_info:
        filters:
          fqdn: "{{ fqdn }}"
          view: "{{ _view.id }}"
      register: auth_zone_info
    - assert:
        that:
          - auth_zone_info.objects | length == 1
          - auth_zone_info.objects[0].fqdn == auth_zone.object.fqdn

    - name: Get Auth Zone information by filters (FQDN)
      infoblox.bloxone.dns_auth_zone_info:
        filters:
          fqdn: "{{ fqdn }}"
          view: "{{ _view.id }}"
      register: auth_zone_info
    - assert:
        that:
          - auth_zone_info.objects | length == 1
          - auth_zone_info.objects[0].id == auth_zone.id

    - name: Get Auth Zone information by filter query
      infoblox.bloxone.dns_auth_zone_info:
        filter_query: "fqdn=='{{ fqdn }}' and view=='{{ _view.id }}'"
    - assert:
        that:
          - auth_zone_info.objects | length == 1
          - auth_zone_info.objects[0].id == auth_zone.id

    - name: Get Auth Zone information by tag filters
      infoblox.bloxone.dns_auth_zone_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - auth_zone_info.objects | length == 1
          - auth_zone_info.objects[0].id == auth_zone.id

  always:
    # Cleanup if the test fails
    - name: "Delete Auth Zone"
      infoblox.bloxone.dns_auth_zone:
        fqdn: "{{ fqdn }}"
        view: "{{ _view.id }}"
        state: "absent"
      ignore_errors: true

    - name: "Delete the View"
      ansible.builtin.include_role:
        name: setup_view
        tasks_from: cleanup.yml
