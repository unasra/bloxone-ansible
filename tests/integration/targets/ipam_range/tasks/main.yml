---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:

    - ansible.builtin.set_fact:
        tag_value: "site-{{ 999999 | random | string }}"
        range_start: "10.0.0.1"
        range_end: "10.0.0.254"

    - name: "Create a Range (check mode)"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
      check_mode: true
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is changed
          - range is not failed
          - range_info.objects | length == 0

    - name: "Create a Range"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].id == range.id
          - range_info.objects[0].start == range.object.start
          - range_info.objects[0].end == range.object.end

    - name: "Create a Range (idempotent)"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
      register: range
    - assert:
        that:
          - range is not changed
          - range is not failed

    - name: "Delete a Range (check mode)"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "absent"
      check_mode: true
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is changed
          - range is not failed
          - range_info.objects | length == 1

    - name: "Delete a Range"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "absent"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is changed
          - range is not failed
          - range_info.objects | length == 0

    - name: "Delete a Range (idempotent)"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "absent"
      register: range
    - assert:
        that:
          - range is not changed
          - range is not failed

    - name: "Create a Range with comment"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
        comment: "Comment."
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].comment == "Comment."

    - name: "Create a Range with DHCP disabled"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        disable_dhcp: "true"
        state: "present"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].disable_dhcp == true

    - name: "Create a Range with tags"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        tags:
          location: "{{ tag_value }}"
        state: "present"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].tags.location == tag_value

    - name: "Create a Range with name"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
        name: "Test Range"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].name == "Test Range"

    - name: "Create a Range with exclusion ranges"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
        exclusion_ranges:
          - start: "10.0.0.10"
            end: "10.0.0.20"
            comment: "Exclude this range"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].exclusion_ranges[0].start == "10.0.0.10"
          - range_info.objects[0].exclusion_ranges[0].end == "10.0.0.20"
          - range_info.objects[0].exclusion_ranges[0].comment == "Exclude this range"

    - name: "Create a Range with threshold"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "present"
        threshold:
          enabled: true
          high: 90
          low: 10
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].threshold.enabled == true
          - range_info.objects[0].threshold.high == 90
          - range_info.objects[0].threshold.low == 10

    - name: "Create a Range with inheritance sources"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        inheritance_sources:
          dhcp_options:
            action: "block"
        state: "present"
      register: range
    - name: Get information about the Range
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range is not failed
          - range_info.objects | length == 1
          - range_info.objects[0].inheritance_sources.dhcp_options.action == "block"


  always:
    - name: "Delete a Range"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "absent"

    - ansible.builtin.include_role:
        name: "setup_subnet"
        tasks_from: "cleanup.yml"

    - ansible.builtin.include_role:
        name: "setup_ip_space"
        tasks_from: "cleanup.yml"
