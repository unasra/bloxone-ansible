---
- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    # Create a random Service name to avoid conflicts
    - ansible.builtin.set_fact:
        service_name: "test-infra-service-{{ 999999 | random | string }}"
        tag_value: "site-{{ 999999 | random | string }}"

    - name: Create a Service
      infoblox.bloxone.infra_service:
        name: "{{ service_name }}"
        pool_id: "{{ _infra_host.object.pool_id }}"
        service_type: "dns"
        tags:
          location: "{{ tag_value }}"
        state: present
      register: infra_service

    - name: Get Information about the Service by Id
      infoblox.bloxone.infra_service_info:
        id: "{{ infra_service.id }}"
      register: infra_service_info
    - assert:
        that:
          - infra_service_info.objects | length == 1
          - infra_service_info.objects[0].name == infra_service.object.name

    - name: Get Service information by filters (Display Name)
      infoblox.bloxone.infra_service_info:
        filters:
          name: "{{ service_name }}"
      register: infra_service_info
    - assert:
        that:
          - infra_service_info.objects | length == 1
          - infra_service_info.objects[0].id == infra_service.id

    - name: Get Service information by filter query
      infoblox.bloxone.infra_service_info:
        filter_query: "name=='{{ service_name }}'"
    - assert:
        that:
          - infra_service_info.objects | length == 1
          - infra_service_info.objects[0].id == infra_service.id

    - name: Get Service information by tag filters
      infoblox.bloxone.infra_service_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - infra_service_info.objects | length == 1
          - infra_service_info.objects[0].id == infra_service.id

  always:
    # Cleanup if the test fails
    - name: "Delete Service"
      infoblox.bloxone.infra_service:
        name: "{{ service_name }}"
        pool_id: "{{ _infra_host.object.pool_id }}"
        service_type: "dns"
        state: "absent"
      ignore_errors: true
