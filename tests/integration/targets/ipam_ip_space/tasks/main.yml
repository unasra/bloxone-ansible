---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    # Create a random IP space name to avoid conflicts
    - ansible.builtin.set_fact:
        name: "test-ip-space-{{ 999999 | random | string }}"

    # Basic tests for IP space
    - name: "Create an IP space (check mode)"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
      check_mode: true
      register: ip_space
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is changed
          - ip_space is not failed
          - ip_space_info.objects | length == 0

    - name: "Create an IP space"
      infoblox.universal_ddi.ipam_ip_space:
          name: "{{ name }}"
          state: "present"
      register: ip_space
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].id == ip_space.id
          - ip_space_info.objects[0].name == ip_space.object.name

    - name: "Create an IP space (idempotent)"
      infoblox.universal_ddi.ipam_ip_space:
          name: "{{ name }}"
          state: "present"
      register: ip_space
    - assert:
        that:
          - ip_space is not changed
          - ip_space is not failed

    - name: "Delete IP Space (check mode)"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "absent"
      check_mode: true
      register: ip_space
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is changed
          - ip_space is not failed
          - ip_space_info.objects | length == 1

    - name: "Delete IP Space"
      infoblox.universal_ddi.ipam_ip_space:
          name: "{{ name }}"
          state: "absent"
      register: ip_space
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
          filters:
            name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is changed
          - ip_space is not failed
          - ip_space_info.objects | length == 0

    - name: "Delete IP Space (idempotent)"
      infoblox.universal_ddi.ipam_ip_space:
          name: "{{ name }}"
          state: "absent"
      register: ip_space
    - assert:
        that:
          - ip_space is not changed
          - ip_space is not failed

    # Create an IP space with tags
    - name: "Create an IP space with tags"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        tags:
          location: "site-1"
        state: "present"
      register: ip_space
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].id == ip_space.id
          - ip_space_info.objects[0].tags.location == "site-1"

    # Create an IP space with DHCP configuration value overridden
    - name: "Create an IP space with DHCP configuration value overridden"
      infoblox.universal_ddi.ipam_ip_space:
          name: "{{ name }}"
          dhcp_config:
              lease_time: 3600
          inheritance_sources:
              dhcp_config:
                  lease_time:
                    action: override
                  # The API currently requires all fields inside the inheritance config to be explicitly provided,
                  # or it fails with error 'The value of an inheritance action field is not valid'.
                  abandoned_reclaim_time:
                    action: inherit
                  abandoned_reclaim_time_v6:
                    action: inherit
                  allow_unknown:
                      action: inherit
                  allow_unknown_v6:
                    action: inherit
                  echo_client_id:
                    action: inherit
                  filters:
                    action: inherit
                  filters_v6:
                    action: inherit
                  ignore_client_uid:
                    action: inherit
                  ignore_list:
                    action: inherit
                  lease_time_v6:
                    action: inherit
    - name: Get information about the IP space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].dhcp_config.lease_time == 3600
          - ip_space_info.objects[0].inheritance_sources.dhcp_config.lease_time.action == "override"

    - name: "Create an IP Space with ASM config overridden"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        asm_config:
          asm_threshold: 70
          enable: true
          enable_notification: true
          forecast_period: 12
          growth_factor: 40
          growth_type: "count"
          history: 40
          min_total: 30
          min_unused: 30
        inheritance_sources:
          asm_config:
            asm_enable_block:
              action: inherit
            asm_growth_block:
              action: inherit
            asm_threshold:
              action: override
            forecast_period:
              action: override
            history:
              action: override
            min_total:
              action: override
            min_unused:
              action: override
        state: "present"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is changed
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].asm_config.asm_threshold == 70
          - ip_space_info.objects[0].asm_config.forecast_period == 12
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_enable_block.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_growth_block.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_threshold.action == "override"
          - ip_space_info.objects[0].inheritance_sources.asm_config.forecast_period.action == "override"
          - ip_space_info.objects[0].inheritance_sources.asm_config.history.action == "override"
          - ip_space_info.objects[0].inheritance_sources.asm_config.min_total.action == "override"
          - ip_space_info.objects[0].inheritance_sources.asm_config.min_unused.action == "override"

    - name: "Create an IP Space with comment"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        comment: "Comment"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].comment == "Comment"

    - name: "Create an IP Space with ddns_client_update set to server"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        ddns_client_update: "server"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].ddns_client_update == "server"

    - name: "Create an IP Space with ddns_conflict_resolution_mode set to check_exists_with_dhcid"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        ddns_use_conflict_resolution: "false"
        ddns_conflict_resolution_mode: "check_exists_with_dhcid"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].ddns_use_conflict_resolution == false

    - name: "Create an IP Space with ddns_domain not empty"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        ddns_domain: "abc"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].ddns_domain == "abc"

    - name: "Create an IP Space with ddns_generate_name set to true"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        ddns_generate_name: true
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].ddns_generate_name == true

    - name: "Create an IP Space with ddns_generated_prefix"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        ddns_generated_prefix: "host-prefix"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].ddns_generated_prefix == "host-prefix"

    - name: "Create an IP Space with header_option_file_name"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        header_option_filename: "HEADER_OPTION_FILEip_space_name"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].header_option_filename == "HEADER_OPTION_FILEip_space_name"

    - name: "Create an IP Space with header_option_server_address"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        header_option_server_address: "10.0.0.0"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].header_option_server_address == "10.0.0.0"

    - name: "Create an IP Space with host_name_rewrite_char"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        hostname_rewrite_char: "+"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].hostname_rewrite_char == "+"

    - name: "Create an IP Space with host_name_rewrite_enable set to true"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        hostname_rewrite_enabled: true
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].hostname_rewrite_enabled == true

    - name: "Create an IP Space with host_name_rewrite_regex"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "present"
        hostname_rewrite_regex: "[^a-z]"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].hostname_rewrite_regex == "[^a-z]"

    - name: "Create an IP Space with empty Compartment Id"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        compartment_id: ""
        state: "present"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].compartment_id == ""

    - name: "Create an IP Space with Compartment Id as null"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        compartment_id: null
        state: "present"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].compartment_id == ""

    - name: "Create an IP Space with inheritance sources"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        inheritance_sources:
          asm_config:
            asm_enable_block:
              action: inherit
            asm_growth_block:
              action: inherit
            asm_threshold:
              action: inherit
            forecast_period:
              action: inherit
            history:
              action: inherit
            min_total:
              action: inherit
            min_unused:
              action: inherit
          ddns_client_update:
            action: inherit
          ddns_conflict_resolution_mode:
            action: inherit
          ddns_ttl_percent:
            action: inherit
          ddns_update_on_renew:
            action: inherit
          ddns_use_conflict_resolution:
            action: inherit
          header_option_filename:
            action: inherit
          header_option_server_address:
            action: inherit
          header_option_server_name:
            action: inherit
          hostname_rewrite_block:
            action: inherit
          vendor_specific_option_option_space:
            action: inherit
        state: "present"
      register: ip_space
    - name: Get information about the IP Space
      infoblox.universal_ddi.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space is not failed
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_enable_block.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_growth_block.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.asm_threshold.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.forecast_period.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.history.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.min_total.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.asm_config.min_unused.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.ddns_client_update.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.ddns_conflict_resolution_mode.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.ddns_ttl_percent.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.ddns_update_on_renew.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.ddns_use_conflict_resolution.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.header_option_filename.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.header_option_server_address.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.header_option_server_name.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.hostname_rewrite_block.action == "inherit"
          - ip_space_info.objects[0].inheritance_sources.vendor_specific_option_option_space.action == "inherit"

  always:
    # Cleanup if the test fails
    - name: "Delete IP Space"
      infoblox.universal_ddi.ipam_ip_space:
        name: "{{ name }}"
        state: "absent"
      ignore_errors: true
