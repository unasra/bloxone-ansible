---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    # Create a random ACL name to avoid conflicts
    - ansible.builtin.set_fact:
        acl_name: "test-acl-{{ 999999 | random | string }}"
        tag_value: "site-{{ 999999 | random | string }}"

    # Basic Test for DNS ACL
    - name: Create a DNS ACL
      infoblox.universal_ddi.dns_acl:
        name: "{{ acl_name }}"
        tags:
          location: "{{ tag_value }}"
        state: present
      register: dns_acl

    - name: Get Information about the DNS ACL by ID
      infoblox.universal_ddi.dns_acl_info:
        filters:
            id: "{{ dns_acl.id }}"
      register: dns_acl_info
    - assert:
        that:
          - dns_acl_info.objects | length == 1
          - dns_acl_info.objects[0].name == dns_acl.object.name

    - name: Get DNS ACL information by filters (Name)
      infoblox.universal_ddi.dns_acl_info:
        filters:
          name: "{{ acl_name }}"
      register: dns_acl_info
    - assert:
        that:
          - dns_acl_info.objects | length == 1
          - dns_acl_info.objects[0].id == dns_acl.id

    - name: Get DNS ACL information by filter query
      infoblox.universal_ddi.dns_acl_info:
        filter_query: "name=='{{ acl_name }}'"
    - assert:
        that:
          - dns_acl_info.objects | length == 1
          - dns_acl_info.objects[0].id == dns_acl.id

    - name: Get DNS ACL information by tag filters
      infoblox.universal_ddi.dns_acl_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - dns_acl_info.objects | length == 1
          - dns_acl_info.objects[0].id == dns_acl.id

  always:
    # Cleanup if the test fails
    - name: "Delete DNS ACL"
      infoblox.universal_ddi.dns_acl:
        name: "{{ acl_name }}"
        state: "absent"
      ignore_errors: true
