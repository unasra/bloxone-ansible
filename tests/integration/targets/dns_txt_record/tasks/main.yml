---
- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"

  block:
    # Create a TXT record with a random name to avoid conflicts
    - ansible.builtin.set_fact:
        record_name: "test-txt-record-{{ 999999 | random | string }}"

    - name: Create a TXT Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: "TXT"
        state: present
      check_mode: true
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
            zone: "{{ _auth_zone.id }}"
            type: TXT
      register: txt_record_info
    - assert:
       that:
        - txt_record is changed
        - txt_record_info is not failed
        - txt_record_info.objects | length == 0

    - name: Create a TXT Record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: "TXT"
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
        that:
        - txt_record is changed
        - txt_record_info is not failed
        - txt_record_info.objects | length == 1
        - txt_record_info.objects[0].id == txt_record.id
        - txt_record_info.objects[0].rdata.text == "sample text"
        - txt_record_info.objects[0].type == "TXT"
        - txt_record_info.objects[0].zone == txt_record.object.zone

    - name: Create a TXT Record (idempotent)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: "TXT"
        state: present
      register: txt_record
    - assert:
        that:
          - txt_record is not changed
          - txt_record is not failed

    - name: Delete the TXT Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: TXT
        state: absent
      check_mode: true
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
       that:
        - txt_record is changed
        - txt_record_info is not failed
        - txt_record_info.objects | length == 1

    - name: Delete the TXT Record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: TXT
        state: absent
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
            zone: "{{ _auth_zone.id }}"
            type: TXT
      register: txt_record_info
    - assert:
       that:
        - txt_record_info is not failed
        - txt_record_info.objects | length == 0

    - name: Delete the TXT Record (idempotent)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: TXT
        state: absent
      register: txt_record
    - assert:
       that:
        - txt_record is not changed
        - txt_record is not failed

    - name: Create a TXT Record with comment
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "example text"
        type: "TXT"
        comment: "This is a test TXT Record"
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
       that:
        - txt_record_info is not failed
        - txt_record_info.objects | length == 1
        - txt_record_info.objects[0].id == txt_record.id
        - txt_record_info.objects[0].comment == "This is a test TXT Record"

    - name: Create a TXT Record with TTL
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "example text"
        type: "TXT"
        ttl: 3600
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
       that:
        - txt_record_info is not failed
        - txt_record_info.objects | length == 1
        - txt_record_info.objects[0].id == txt_record.id
        - txt_record_info.objects[0].ttl == 3600

    - name: Create a TXT Record with Disabled
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "example text"
        type: "TXT"
        disabled: true
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
       that:
          - txt_record_info is not failed
          - txt_record_info.objects | length == 1
          - txt_record_info.objects[0].id == txt_record.id
          - txt_record_info.objects[0].disabled == true

    - name: Create a TXT Record with TAGS
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "example text"
        type: "TXT"
        tags:
          location: "site-1"
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: TXT
      register: txt_record_info
    - assert:
       that:
          - txt_record_info is not failed
          - txt_record_info.objects | length == 1
          - txt_record_info.objects[0].id == txt_record.id
          - txt_record_info.objects[0].tags.location == "site-1"

    - name: Create a TXT Record with Inheritance Sources
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TXT"
        rdata:
          text: "example text"
        inheritance_sources:
          ttl:
            action: "inherit"
        state: present
      register: txt_record
    - name: Get information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TXT"
      register: txt_record_info
    - assert:
        that:
          - txt_record_info is not failed
          - txt_record_info.objects | length == 1
          - txt_record_info.objects[0].id == txt_record.id
          - txt_record_info.objects[0].inheritance_sources.ttl.action == "inherit"

    - name: Create a TXT Record with Name in Zone and Zone
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: "TXT"
        state: present
      register: txt_record
    - name: Get Information about the TXT Record
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          zone: "{{ _auth_zone.id }}"
          type: "TXT"
      register: txt_record_info
    - assert:
        that:
          - txt_record_info is not failed
          - txt_record_info.objects | length == 1
          - txt_record_info.objects[0].id == txt_record.id
          - txt_record_info.objects[0].name_in_zone == txt_record.object.name_in_zone
          - txt_record_info.objects[0].zone == txt_record.object.zone

  always:
    - name: "Delete the TXT Record"
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          text: "sample text"
        type: "TXT"
        state: absent
      register: txt_record

    - name: "Delete the Auth Zone"
      ansible.builtin.include_role:
        name: setup_auth_zone
        tasks_from: cleanup.yml

    - name: "Delete the View"
      ansible.builtin.include_role:
        name: setup_view
        tasks_from: cleanup.yml
