---
- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"

  block:
    # Create a random name to avoid conflicts
    - ansible.builtin.set_fact:
        record_name: "test-generic-record-{{ 999999 | random | string }}"

    - name: Create a Generic Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        state: present
      check_mode: true
      register: generic_record
    - name: Get information about the Generic Record (check mode)
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record is changed
          - generic_record_info is not failed
          - generic_record_info.objects | length == 0

    - name: Create a Generic Record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record is changed
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].rdata.subfields[0].value == "10 1 \"https://example.com\""
          - generic_record_info.objects[0].type == "TYPE256"
          - generic_record_info.objects[0].zone == generic_record.object.zone

    - name: Create a Generic Record (idempotent)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        state: present
      register: generic_record
    - assert:
        that:
          - generic_record is not changed
          - generic_record is not failed

    - name: Delete Generic Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        type: "TYPE256"
        state: absent
      check_mode: true
      register: generic_record
    - name: Get information about the Generic Record (check mode)
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record is changed
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1

    - name: Delete Generic Record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        type: "TYPE256"
        state: absent
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 0

    - name: Delete Generic Record (idempotent)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        type: "TYPE256"
        state: absent
      register: generic_record
    - assert:
        that:
          - generic_record is not changed
          - generic_record is not failed

    - name: Create a Generic Record with comment
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        comment: "This is a test Generic Record"
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].comment == "This is a test Generic Record"

    - name: Create a Generic Record with TTL
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        ttl: 3600
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].ttl == 3600

    - name: Create a Generic Record with Disabled
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        disabled: true
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].disabled == true

    - name: Create a Generic Record with Tags
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        tags:
          location: "site-1"
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].tags.location == "site-1"

    - name: Create a Generic Record with Inheritance Sources
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        inheritance_sources:
          ttl:
            action: "inherit"
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].inheritance_sources.ttl.action == "inherit"

    - name: Create a Generic Record with Name in Zone and Zone
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        type: "TYPE256"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        state: present
      register: generic_record
    - name: Get information about the Generic Record
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          zone: "{{ _auth_zone.id }}"
          type: "TYPE256"
      register: generic_record_info
    - assert:
        that:
          - generic_record_info is not failed
          - generic_record_info.objects | length == 1
          - generic_record_info.objects[0].id == generic_record.id
          - generic_record_info.objects[0].name_in_zone == generic_record.object.name_in_zone
          - generic_record_info.objects[0].zone == generic_record.object.zone

  always:
    - name: "Delete Generic Record"
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          subfields:
            - type: "PRESENTATION"
              value: "10 1 \"https://example.com\""
        type: "TYPE256"
        state: "absent"
      ignore_errors: true

    - name: "Delete Auth Zone"
      ansible.builtin.include_role:
       name: setup_auth_zone
       tasks_from: cleanup.yml

    - name: "Delete the View"
      ansible.builtin.include_role:
       name: setup_view
       tasks_from: cleanup.yml
