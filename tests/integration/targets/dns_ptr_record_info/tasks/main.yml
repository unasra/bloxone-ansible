---
- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"

  block:
    # Create a random PTR record name to avoid conflicts
    - ansible.builtin.set_fact:
        record_name: "{{ 256 | random }}"
        tag_value: "site-{{ 999999 | random | string }}"

    # Basic Test for PTR Record
    - name: Create a PTR Record
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ rmz.id }}"
        rdata:
          dname: "domain.com."
        type: "PTR"
        tags:
          location: "{{ tag_value }}"
        state: present
      register: ptr_record

    - name: Get PTR Record information by ID
      infoblox.bloxone.dns_record_info:
        id: "{{ ptr_record.id }}"
      register: ptr_record_info
    - assert:
        that:
          - ptr_record_info.objects | length == 1

    - name: Get PTR Record information by filters
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          zone: "{{ rmz.id }}"
          type: "PTR"
      register: ptr_record_info
    - assert:
        that:
          - ptr_record_info.objects | length == 1
          - ptr_record_info.objects[0].id == ptr_record.id

    - name: Get PTR Record information by raw filter query
      infoblox.bloxone.dns_record_info:
        filter_query: "name_in_zone=='{{ record_name }}' and zone=='{{ rmz.id }}' and type=='PTR'"
    - assert:
        that:
          - ptr_record_info.objects | length == 1
          - ptr_record_info.objects[0].id == ptr_record.id

    - name: Get PTR Record information by tag filters
      infoblox.bloxone.dns_record_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - ptr_record_info.objects | length == 1
          - ptr_record_info.objects[0].id == ptr_record.id

  always:
    # Cleanup if the test fails
    - name: "Delete PTR Record"
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ rmz.id }}"
        rdata:
          dname: "domain.com."
        type: "PTR"
        state: "absent"
      ignore_errors: true

    - name: "Delete Reverse Mapping Zone"
      ansible.builtin.include_role:
       name: setup_auth_zone_rmz
       tasks_from: cleanup.yml
