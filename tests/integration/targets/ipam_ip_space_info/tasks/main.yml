---
- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    - ansible.builtin.set_fact:
        name: "test-ip-space-{{ 999999 | random | string }}"
        tag_value: "site-{{ 999999 | random | string }}"

    - name: "Create an IP space"
      infoblox.bloxone.ipam_ip_space:
        name: "{{ name }}"
        tags:
          location: "{{ tag_value }}"
        state: "present"
      register: ip_space

    - name: Get IP Space information by ID
      infoblox.bloxone.ipam_ip_space_info:
        id: "{{ ip_space.id }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].name == ip_space.object.name

    - name: Get IP Space information by filters (name)
      infoblox.bloxone.ipam_ip_space_info:
        filters:
          name: "{{ name }}"
      register: ip_space_info
    - assert:
        that:
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].id == ip_space.id

    - name: Get IP Space information by filter query
      infoblox.bloxone.ipam_ip_space_info:
        filter_query: "name=='{{ name }}'"
    - assert:
        that:
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].id == ip_space.id

    - name: Get IP Space information by tag filters
      infoblox.bloxone.ipam_ip_space_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - ip_space_info.objects | length == 1
          - ip_space_info.objects[0].id == ip_space.id

  always:
    # Cleanup if the test fails
    - name: "Delete IP Space"
      infoblox.bloxone.ipam_ip_space:
        name: "{{ name }}"
        state: "absent"
      ignore_errors: true
