---

#TODO: add tests
# The following require additional plugins to be supported.
# - tsig keys
# - acl

- module_defaults:
    group/infoblox.bloxone.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    # Create a random name to avoid conflicts
    - ansible.builtin.set_fact:
        dns_server_name: "test-dns-server-{{ 999999 | random | string }}"

    - name: Create a DNS Server (check mode)
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: present
      check_mode: true
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server is changed
          - dns_server_info is not failed
          - dns_server_info.objects | length == 0

    - name: Create a DNS Server
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server is changed
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1

    - name: Create a DNS Server (idempotent)
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: present
      register: dns_server
    - assert:
        that:
          - dns_server is not changed
          - dns_server is not failed

    - name: Delete the DNS Server (check mode)
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: absent
      check_mode: true
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server is changed
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1

    - name: Delete the DNS Server
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: absent
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server is changed
          - dns_server_info is not failed
          - dns_server_info.objects | length == 0

    - name: Create a DNS Server with EDNS option enabled
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        add_edns_option_in_outgoing_query: true
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].id == dns_server.id
          - dns_server_info.objects[0].add_edns_option_in_outgoing_query == true

    - name: Create a DNS Server with Auto Sort Views enabled
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        auto_sort_views: true
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].auto_sort_views == true

    - name: Create a DNS Server with a comment
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        comment: "test comment"
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].comment == "test comment"

    - name: Create a DNS Server with Custom Root Nameservers
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        custom_root_ns:
          - address: "192.168.10.10"
            fqdn: "test-example.com."
          - address: "192.168.10.11"
            fqdn: "test-example2.com"
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].custom_root_ns[0].address == "192.168.10.10"
          - dns_server_info.objects[0].custom_root_ns[0].fqdn == "test-example.com."
          - dns_server_info.objects[0].custom_root_ns[1].address == "192.168.10.11"
          - dns_server_info.objects[0].custom_root_ns[1].fqdn == "test-example2.com."

    - name: Create a DNS Server with Recursive Clients
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        recursive_clients: 100
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert DNS Server Configuration
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].recursive_clients == 100


    - name: Create a DNS Server with Custom Root Nameservers Enabled
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        custom_root_ns_enabled: true
        custom_root_ns:
          - address: "192.168.10.10"
            fqdn: "test-example.com."
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].custom_root_ns_enabled == true

    - name: Create a DNS Server with DNSSEC Enable Validation (false)
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        dnssec_enable_validation: false
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].dnssec_enable_validation == false

    - name: Create a DNS Server with DNSSEC Enabled (false)
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        dnssec_enabled: false
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].dnssec_enabled == false

    - name: Create DNS Server with DNSSEC Trust Anchors
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        dnssec_trust_anchors:
          - algorithm: "8"
            public_key: "AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3+/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kvArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+eoZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfdRUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwNR1AkUTV74bU="
            zone: "test-infoblox.com."
            sep: true
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert DNS Server Attributes
      assert:
        that:
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].dnssec_trust_anchors[0].algorithm == 8
          - dns_server_info.objects[0].dnssec_trust_anchors[0].zone == "test-infoblox.com."
          - dns_server_info.objects[0].dnssec_trust_anchors[0].sep == true

    - name: Create a DNS Server with DNSSEC Validate Expiry enabled
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        dnssec_validate_expiry: true
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].dnssec_validate_expiry == true

    - name: Create a DNS Server with ECS enabled
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        ecs_enabled: true
        ecs_zones:
          - access: "allow"
            fqdn: "test-infoblox.com."
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].ecs_enabled == true

    - name: Create DNS Server with ECS Forwarding configuration
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        ecs_forwarding: true
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert that DNS Server ECS Forwarding setting is correct
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].ecs_forwarding == true

    - name: Create a DNS server with ECS Prefix V4
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        ecs_prefix_v4: 20
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct ecs_prefix_v4
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].ecs_prefix_v4 == 20

    - name: Create a DNS server with ECS Prefix V6
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        ecs_prefix_v6: 50
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct ecs_prefix_v6
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].ecs_prefix_v6 == 50

    - name: Create a DNS server with ECS Zones
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        ecs_zones:
          - access: "allow"
            fqdn: "test-infoblox.com."
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct ECS zones
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].ecs_zones[0].access == "allow"
          - dns_server_info.objects[0].ecs_zones[0].fqdn == "test-infoblox.com."

    - name: Create a DNS server with Filter_AAAA_On_V4
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        filter_aaaa_on_v4: "break_dnssec"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct filter_aaaa_on_v4
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].filter_aaaa_on_v4 == "break_dnssec"

    - name: Create a DNS server with Filter_AAAA_On_V4 as yes
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        filter_aaaa_on_v4: "yes"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct yes
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].filter_aaaa_on_v4 == "yes"

    - name: Create a DNS server with Forwarders
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        forwarders:
          - address: "192.168.10.10"
            fqdn: "test-example.com."
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct forwarders
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].forwarders[0].address == "192.168.10.10"
          - dns_server_info.objects[0].forwarders[0].fqdn == "test-example.com."

    - name: Create a DNS server with Forwarders_only set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        forwarders_only: true
        forwarders:
          - address: "192.168.11.11"
            fqdn: "test-infoblox.com."
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct forwarders_only setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].forwarders_only == true
          - dns_server_info.objects[0].forwarders[0].address == "192.168.11.11"
          - dns_server_info.objects[0].forwarders[0].fqdn == "test-infoblox.com."

    - name: Create a DNS server with Gss_Tsig_Enabled set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        gss_tsig_enabled: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct gss_tsig_enabled value
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].gss_tsig_enabled == true

    - name: Create a DNS server with Inheritance sources action set to inherit
      infoblox.bloxone.dns_server:
        name: "dns-server-example"
        inheritance_sources:
          add_edns_option_in_outgoing_query:
            action: "inherit"
          custom_root_ns_block:
            action: "inherit"
          dnssec_validation_block:
            action: "inherit"
          ecs_block:
            action: "inherit"
          filter_aaaa_on_v4:
            action: "inherit"
          forwarders_block:
            action: "inherit"
          gss_tsig_enabled:
            action: "inherit"
          kerberos_keys:
            action: "inherit"
          lame_ttl:
            action: "inherit"
          log_query_response:
            action: "inherit"
          match_recursive_only:
            action: "inherit"
          max_cache_ttl:
            action: "inherit"
          max_negative_ttl:
            action: "inherit"
          minimal_responses:
            action: "inherit"
          notify:
            action: "inherit"
          query_port:
            action: "inherit"
          recursion_enabled:
            action: "inherit"
          recursive_clients:
            action: "inherit"
          resolver_query_timeout:
            action: "inherit"
          secondary_axfr_query_limit:
            action: "inherit"
          secondary_soa_query_limit:
            action: "inherit"
          sort_list:
            action: "inherit"
          synthesize_address_records_from_https:
            action: "inherit"
          transfer_acl:
            action: "inherit"
          use_forwarders_for_subzones:
            action: "inherit"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "dns-server-example"
      register: dns_server_info
    - name: Assert the DNS server exists and all inheritance sources have action set to inherit
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].inheritance_sources.add_edns_option_in_outgoing_query.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.custom_root_ns_block.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.dnssec_validation_block.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.ecs_block.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.filter_aaaa_on_v4.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.forwarders_block.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.gss_tsig_enabled.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.kerberos_keys.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.lame_ttl.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.log_query_response.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.match_recursive_only.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.max_cache_ttl.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.max_negative_ttl.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.minimal_responses.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.notify.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.query_port.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.recursion_enabled.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.recursive_clients.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.resolver_query_timeout.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.secondary_axfr_query_limit.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.secondary_soa_query_limit.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.sort_list.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.synthesize_address_records_from_https.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.transfer_acl.action == "inherit"
          - dns_server_info.objects[0].inheritance_sources.use_forwarders_for_subzones.action == "inherit"

    - name: Create a DNS server with Lame_TTL set to 3000
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        lame_ttl: 3000
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct lame_ttl
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].lame_ttl == 3000

    - name: Create a DNS server with Log_Query_Response set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        log_query_response: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct log_query_response
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].log_query_response == true

    - name: Create a DNS server with Match_Recursive_Only set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        match_recursive_only: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct match_recursive_only
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].match_recursive_only == true

    - name: Create a DNS server with Max_Cache_TTL
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        max_cache_ttl: 600000
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct max_cache_ttl
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].max_cache_ttl == 600000

    - name: Create a DNS server with Max_Negative_TTL
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        max_negative_ttl: 10000
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct max_negative_ttl
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].max_negative_ttl == 10000

    - name: Create a DNS server with Minimal_Responses set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        minimal_responses: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct minimal_responses setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].minimal_responses == true

    - name: Create a DNS server with Notify set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        notify: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct notify setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].notify == true

    - name: Create a DNS server with Recursion_Enabled set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        recursion_enabled: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct recursion_enabled setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].recursion_enabled == true

    - name: Create a DNS server with Resolver_Query_Timeout set to 15
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        resolver_query_timeout: 15
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct resolver_query_timeout setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].resolver_query_timeout == 15

    - name: Create a DNS Server with Query Port
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        query_port: 2
        state: present
      register: dns_server
    - name: Get Information about the DNS Server
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert DNS Server Query Port Configuration
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].query_port == 2

    - name: Create a DNS server with Secondary_Axfr_Query_Limit
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        secondary_axfr_query_limit: 2
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct secondary_axfr_query_limit setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].secondary_axfr_query_limit == 2

    - name: Create a DNS server with Secondary_Soa_Query_Limit
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        secondary_soa_query_limit: 2
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct secondary_soa_query_limit setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].secondary_soa_query_limit == 2

    - name: Create a DNS server with Sort_List configuration
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        sort_list:
          - element: ip
            source: "192.168.11.11"
            prioritized_networks:
              - "192.168.12.12"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct sort_list configuration
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].sort_list[0].element == "ip"
          - dns_server_info.objects[0].sort_list[0].source == "192.168.11.11"
          - dns_server_info.objects[0].sort_list[0].prioritized_networks[0] == "192.168.12.12"

    - name: Create a DNS server with Sort_List configuration with element as any
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        sort_list:
          - element: any
            prioritized_networks:
              - "192.168.12.13"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct sort_list configuration
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].sort_list[0].element == "any"
          - dns_server_info.objects[0].sort_list[0].prioritized_networks[0] == "192.168.12.13"


    - name: Create a DNS server with Synthesize_Address_Records_From_Https set to false
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        synthesize_address_records_from_https: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct synthesize_address_records_from_https setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].synthesize_address_records_from_https == true

    - name: Create a DNS server with Tags
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        tags:
          tag1: "value1"
          tag2: "value2"
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct tags
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].tags.tag1 == "value1"
          - dns_server_info.objects[0].tags.tag2 == "value2"

    - name: Create a DNS server with Use_Forwarders_For_Subzones set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        use_forwarders_for_subzones: true
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct use_forwarders_for_subzones setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].use_forwarders_for_subzones == true

    - name: Create a DNS server with Use_Root_Forwarders_For_Local_Resolution_With_B1td set to true
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        use_root_forwarders_for_local_resolution_with_b1td: true
        forwarders:
          - address: "192.168.11.11"
            fqdn: "test-infoblox.com."
        state: present
      register: dns_server
    - name: Get DNS server details
      infoblox.bloxone.dns_server_info:
        filters:
          name: "{{ dns_server_name }}"
      register: dns_server_info
    - name: Assert the DNS server exists and has the correct use_root_forwarders_for_local_resolution_with_b1td setting
      assert:
        that:
          - dns_server_info is not failed
          - dns_server_info.objects | length == 1
          - dns_server_info.objects[0].use_root_forwarders_for_local_resolution_with_b1td == true

  always:
    # Cleanup if the test fails
    - name: "Delete Dns Server"
      infoblox.bloxone.dns_server:
        name: "{{ dns_server_name }}"
        state: "absent"
      ignore_errors: true
