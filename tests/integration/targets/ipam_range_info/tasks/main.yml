---
- module_defaults:
    group/infoblox.universal_ddi.all:
      portal_url: "{{ portal_url }}"
      portal_key: "{{ portal_key }}"
  block:
    # Create a random tag to avoid conflicts
    - ansible.builtin.set_fact:
        tag_value: "site-{{ 999999 | random | string }}"
        range_start: "10.0.0.1"
        range_end: "10.0.0.254"

    - name: "Create an IPAM Range"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        tags:
          location: "{{ tag_value }}"
        state: "present"
      register: ipam_range

    - name: Get IPAM Range information by ID
      infoblox.universal_ddi.ipam_range_info:
        id: "{{ ipam_range.id }}"
      register: range_info
    - assert:
        that:
          - range_info.objects | length == 1
          - range_info.objects[0].name == ipam_range.object.name

    - name: Get IPAM Range information by filters
      infoblox.universal_ddi.ipam_range_info:
        filters:
          start: "{{ range_start }}"
          end: "{{ range_end }}"
          space: "{{ _ip_space.id }}"
      register: range_info
    - assert:
        that:
          - range_info.objects | length == 1
          - range_info.objects[0].id == ipam_range.id

    - name: Get IPAM Range information by filter query
      infoblox.universal_ddi.ipam_range_info:
        filter_query: "start=='{{ range_start }}' and end=='{{ range_end }}' and space=='{{ _ip_space.id }}'"
      register: range_info
    - assert:
        that:
          - range_info.objects | length == 1
          - range_info.objects[0].id == ipam_range.id

    - name: Get IPAM Range information by tag filters
      infoblox.universal_ddi.ipam_range_info:
        tag_filters:
          location: "{{ tag_value }}"
      register: range_info
    - assert:
        that:
          - range_info.objects | length == 1
          - range_info.objects[0].id == ipam_range.id

  always:
    # Cleanup if the test fails
    - name: "Delete IPAM Range"
      infoblox.universal_ddi.ipam_range:
        start: "{{ range_start }}"
        end: "{{ range_end }}"
        space: "{{ _ip_space.id }}"
        state: "absent"
      ignore_errors: true

    - ansible.builtin.include_role:
        name: "setup_subnet"
        tasks_from: "cleanup.yml"

    - ansible.builtin.include_role:
        name: "setup_ip_space"
        tasks_from: "cleanup.yml"
